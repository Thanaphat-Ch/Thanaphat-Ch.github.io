import streamlit as st
import numpy as np
import pandas as pd
import joblib
from sklearn.tree import DecisionTreeClassifier
#pip install streamlit scikit-learn numpy pandas joblib

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
data = {
    'temperature': [25, 30, 22, 35, 28, 32, 20, 27, 33, 29],
    'humidity': [60, 55, 70, 40, 50, 45, 75, 65, 42, 58],
    'rainfall': [200, 150, 300, 100, 180, 120, 350, 250, 90, 160],
    'soil_pH': [6.5, 7.0, 5.8, 6.0, 6.3, 6.8, 5.5, 6.7, 6.1, 6.4],
    'soil_moisture': [45, 40, 50, 30, 38, 35, 55, 48, 32, 42],
    'crop_type': [1, 2, 1, 3, 2, 3, 1, 2, 3, 2]  # 1=‡∏Ç‡πâ‡∏≤‡∏ß, 2=‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î, 3=‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á
}

df = pd.DataFrame(data)
X = df.drop(columns=['crop_type'])
y = df['crop_type']

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = DecisionTreeClassifier(criterion='entropy', max_depth=4, random_state=42)
model.fit(X, y)

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
joblib.dump(model, 'crop_model.pkl')

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = joblib.load('crop_model.pkl')

# UI ‡∏î‡πâ‡∏ß‡∏¢ Streamlit
st.title("üå± ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
st.write("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")

# ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
col1, col2 = st.columns(2)
with col1:
    temperature = st.number_input("‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)", min_value=10, max_value=50, value=30)
    humidity = st.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%)", min_value=10, max_value=100, value=50)
    rainfall = st.number_input("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ù‡∏ô (mm)", min_value=0, max_value=1000, value=200)
with col2:
    soil_pH = st.number_input("‡∏Ñ‡πà‡∏≤ pH ‡∏Ç‡∏≠‡∏á‡∏î‡∏¥‡∏ô", min_value=4.0, max_value=9.0, value=6.5)
    soil_moisture = st.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏î‡∏¥‡∏ô (%)", min_value=10, max_value=100, value=40)

if st.button("üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"):
    user_input = np.array([[temperature, humidity, rainfall, soil_pH, soil_moisture]])
    prediction = model.predict(user_input)[0]
    crop_dict = {1: "üåæ ‡∏Ç‡πâ‡∏≤‡∏ß", 2: "üåΩ ‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î", 3: "ü•î ‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á"}
    st.success(f"‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠: {crop_dict[prediction]}")